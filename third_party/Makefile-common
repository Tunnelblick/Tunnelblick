# This Makefile is 'included' in other makefiles after they set up standard variables for the version of Xcode that is being used
# It shouldn't be called by anything other than automated scripts

TOPDIR = $(PWD)

#######################################################################################
# Define names of folders in third_party/sources that contain programs to build:

LZO_NAME         = lzo-2.10

OPENSSL_NAME     = openssl-1.0.2p

PKCS11_NAME      = pkcs11-helper-1.11

EASY_RSA_3_NAME  = easy-rsa-3.0.0-rc2

SPARKLE_NAME     = sparkle-1.5b6
SPARKLE_ZIP_NAME = Sparkle 1.5b6.zip

TUNTAP_20090913_NAME  = tuntap-20090913
TUNTAP_20111101_NAME  = tuntap-20111101
TUNTAP_CURRENT_NAME   = tuntap-20141104
TUNTAP_20090913_TARGZ = tuntap_20090913_src.tar.gz
TUNTAP_20111101_TARGZ = tuntap_20111101_src.tar.gz
TUNTAP_CURRENT_TARGZ  = tuntap_20141104_src.tar.gz

# Names of OpenVPN folders are determined by examining third_party/sources/openvpn

#######################################################################################
# Define treatment of deprecated functions, methods, etc. for Sparkle and OpenVPN

TB_SPARKLE_DEPRECATED_HANDLING = GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS=NO

OPENVPN_DEPRECATED_LLVN_OPTION = -Wno-deprecated-declarations
OPENVPN_DEPRECATED_GCC_MAKE_OPTION = GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS=NO

#######################################################################################
# Define other make variables:

SDKROOT=$(SDK_DIR)

CFLAGS=-isysroot $(SDKROOT) -Os -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET)

BUILD_NAME   = build
SOURCES_NAME = sources
PRODUCTS_NAME = products
PATCHES_NAME = patches

STAGING_DIR = $(TOPDIR)/$(BUILD_NAME)/staging

OPENSSL_BUILD_DIR = $(TOPDIR)/$(BUILD_NAME)/$(OPENSSL_NAME)
OPENSSL_STAGING_DIR = $(STAGING_DIR)/$(OPENSSL_NAME)
OPENSSL_TARGET_FILES = $(foreach f, libcrypto.a libssl.a, $(OPENSSL_STAGING_DIR)/lib/$(f))

LZO_BUILD_DIR = $(TOPDIR)/$(BUILD_NAME)/$(LZO_NAME)
LZO_STAGING_DIR = $(STAGING_DIR)/$(LZO_NAME)

PKCS11_BUILD_DIR = $(TOPDIR)/$(BUILD_NAME)/$(PKCS11_NAME)
PKCS11_STAGING_DIR=$(STAGING_DIR)/$(PKCS11_NAME)

SPARKLE_BUILD_DIR = $(TOPDIR)/$(BUILD_NAME)/$(SPARKLE_NAME)
SPARKLE_PRODUCTS_DIR = $(TOPDIR)/$(PRODUCTS_NAME)/sparkle

EASY_RSA_SOURCE_DIR = $(TOPDIR)/$(SOURCES_NAME)/easy-rsa
EASY_RSA_PRODUCTS_DIR = $(TOPDIR)/$(PRODUCTS_NAME)/easy-rsa-tunnelblick

TUNTAP_SOURCE_DIR = $(TOPDIR)/$(SOURCES_NAME)/tuntap
TUNTAP_BUILD_DIR = $(TOPDIR)/$(BUILD_NAME)/tuntap
TUNTAP_PRODUCTS_DIR = $(TOPDIR)/$(PRODUCTS_NAME)/tuntap

OPENVPN_SOURCE_DIR = $(TOPDIR)/$(SOURCES_NAME)/openvpn
OPENVPN_BUILD_DIR = $(TOPDIR)/$(BUILD_NAME)/openvpn
OPENVPN_PRODUCTS_DIR = $(TOPDIR)/$(PRODUCTS_NAME)/openvpn

PATCHES_DIR = $(TOPDIR)/$(SOURCES_NAME)/$(PATCHES_NAME)

DOWN_ROOT_ARCH_2_2=$(foreach f, $(TARGET_ARCHS_2_2), -arch $f)

#######################################################################################
# Define the make rules:

all: built-easy-rsa-tunnelblick \
    built-tuntap                \
    built-sparkle               \
    built-openvpn
	if [ "$${CONFIGURATION}" != "Debug" ]; then \
		rm -f -R $(TOPDIR)/$(BUILD_NAME) ; \
	fi
	@echo "THIRD_PARTY: Made all third_party for Tunnelblick"

clean:
	rm -f -R $(TOPDIR)/$(BUILD_NAME)
	rm -f -R $(TOPDIR)/$(PRODUCTS_NAME)
	rm -f    built-*
	@echo "THIRD_PARTY: Cleaned all third_party for Tunnelblick"

#######################################################################################
# OPENSSL
#######################################################################################

built-openssl-prepare:
	@echo "THIRD_PARTY: Expanding OpenSSL..."
	mkdir -p $(OPENSSL_BUILD_DIR)
	tar -x -f "$(SOURCES_NAME)/$(OPENSSL_NAME).tar.gz" -C "$(BUILD_NAME)"
	@echo "THIRD_PARTY: Patching OpenSSL..."
	cd $(OPENSSL_BUILD_DIR); \
	if [ -d "$(PATCHES_DIR)/openssl" ]; then \
		for patch_file in $(PATCHES_DIR)/openssl/*.diff; do \
			patch_name=$$(basename $(OPENSSL_BUILD_DIR))/$$(basename "$${patch_file}") ; \
			patch -p1 -N --dry-run -i $$patch_file > /dev/null; \
			if [ $$? == 0 ]; then \
				patch -p1 -N -i $$patch_file; \
				if [ $$? == 0 ]; then \
					echo "OpenSSL patch applied: $$patch_name" ; \
				else \
					echo "error: OpenSSL patch failed after a successful dry run: $$patch_name" ; \
				fi \
			else \
				echo "error: OpenSSL patch could not be applied: $$patch_name" ; \
			fi \
		done \
	fi
	touch built-openssl-prepare
	@echo "THIRD_PARTY: Patched OpenSSL"

built-openssl: built-openssl-prepare
	@echo "THIRD_PARTY: Building OpenSSL..."
	for a in $(OPENSSL_TARGET_ARCHS); do\
		echo Configure OpenSSL for $$a; \
		cd $(OPENSSL_BUILD_DIR); \
		echo "Clean OpenSSL for $$a" ; \
		$(MAKE) clean; \
		echo "Configure OpenSSL for $$a" ; \
		CC=$(CC) CFLAGS="$(CFLAGS)" ./Configure no-shared zlib no-zlib-dynamic no-asm no-krb5 --prefix="$(OPENSSL_STAGING_DIR)/$$a" $$a; \
		echo "Build OpenSSL for $$a" ; \
		$(MAKE) build_libs build_apps openssl.pc libssl.pc libcrypto.pc; \
		echo Install to $(OPENSSL_STAGING_DIR)/$$a; \
		$(MAKE) install_sw; \
		cd -; \
	done
	ditto -v $(OPENSSL_STAGING_DIR)/darwin64-x86_64-cc/include $(OPENSSL_STAGING_DIR)/include/x86_64
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		ditto -v $(OPENSSL_STAGING_DIR)/darwin-i386-cc/include $(OPENSSL_STAGING_DIR)/include/i386 ; \
		ditto -v $(OPENSSL_STAGING_DIR)/darwin-ppc-cc/include $(OPENSSL_STAGING_DIR)/include/ppc   ; \
	fi
	mkdir -p $(OPENSSL_STAGING_DIR)/lib
	for t in $(OPENSSL_TARGET_FILES); do \
		lipo $(OPENSSL_STAGING_DIR)/darwin*/lib/$$(basename $$t) -create -output $$t; \
		ranlib $$t; \
	done
	touch built-openssl
	@echo "THIRD_PARTY: Built OpenSSL"

built-openssl-clean:
	@echo "THIRD_PARTY: Cleaning OpenSSL..."
	rm -f -R $(OPENSSL_BUILD_DIR)
	rm -f -R $(OPENSSL_STAGING_DIR)
	rm -f    built-openssl

#######################################################################################
# PKCS11-HELPER
#######################################################################################

built-pkcs11-helper: built-openssl
	@echo "THIRD_PARTY: Expanding PKCS11-Helper..."
	mkdir -p $(PKCS11_BUILD_DIR)
	tar -x -f $(SOURCES_NAME)/$(PKCS11_NAME).tar.bz2 -C $(BUILD_NAME)
	@echo "THIRD_PARTY: Building PKCS11-Helper..."
	for a in $(TARGET_ARCHS); do \
		cd $(PKCS11_BUILD_DIR) ; \
		echo "Clean PKCS11-Helper for $$a" ; \
		$(MAKE) clean; \
		echo "Configure PKCS11-Helper for $$a" ; \
		CC=$(CC) \
		CFLAGS="$(CFLAGS) -arch $$a" \
		OPENSSL_CFLAGS="-I$(OPENSSL_STAGING_DIR)/include/$$a" \
		OPENSSL_LIBS="-L$(OPENSSL_STAGING_DIR)/lib \
		              -lssl \
		              -lcrypto \
		              -lz" \
		./configure --build=$$a-apple-darwin \
		            --prefix=$(PKCS11_STAGING_DIR)_$$a \
		            --includedir=$(PKCS11_STAGING_DIR)/include \
		            --enable-static \
		            --enable-shared=no \
		            --disable-dependency-tracking ; \
		echo "Build PKCS11-Helper for $$a" ; \
		$(MAKE); \
		echo "Install PKCS11-Helper to $(PKCS11_STAGING_DIR)_$$a" ; \
		$(MAKE) install; \
		cd $(TOPDIR); \
	done
	rm -r -f $(PKCS11_STAGING_DIR)/lib
	mkdir -p $(PKCS11_STAGING_DIR)/lib
	lipo $(PKCS11_STAGING_DIR)_*/lib/libpkcs11-helper.a -create -output $(PKCS11_STAGING_DIR)/lib/libpkcs11-helper.a
	ranlib $(PKCS11_STAGING_DIR)/lib/libpkcs11-helper.a
	touch built-pkcs11-helper
	@echo "THIRD_PARTY: Built PKCS11-Helper"

built-pkcs11-helper-clean:
	@echo "THIRD_PARTY: Cleaning PKCS11-Helper..."
	rm -f -R $(PKCS11_BUILD_DIR)
	rm -f -R $(PKCS11_STAGING_DIR)
	rm -f built-pkcs11-helper
	@echo "THIRD_PARTY: Cleaned PKCS11-Helper"

#######################################################################################
# LZO
#######################################################################################

built-lzo:
	@echo "THIRD_PARTY: Expanding LZO..."
	mkdir -p $(BUILD_NAME)
	tar -x -f $(SOURCES_NAME)/$(LZO_NAME).tar.gz -C $(BUILD_NAME)
	@echo "THIRD_PARTY: Building LZO..."
	for a in $(TARGET_ARCHS); do \
		cd $(LZO_BUILD_DIR) ; \
		echo "Clean LZO for $$a" ; \
		$(MAKE) clean; \
		echo "Configure LZO for $$a" ; \
		CC=$(CC) \
		CFLAGS="$(CFLAGS) -arch $$a" \
		./configure --build=$$a-apple-darwin \
		            --prefix=$(LZO_STAGING_DIR)_$$a/ \
		            --includedir=$(LZO_STAGING_DIR)/include/ \
		            --disable-dependency-tracking \
		            --disable-asm ; \
		echo "Build LZO for $$a" ; \
		$(MAKE); \
		echo "Install LZO to $(LZO_STAGING_DIR)_$$a" ; \
		$(MAKE) install; \
		cd "$(TOPDIR)"; \
	done
	mkdir -p $(LZO_STAGING_DIR)/lib
	lipo $(LZO_STAGING_DIR)_*/lib/liblzo2.a -create -output $(LZO_STAGING_DIR)/lib/liblzo2.a
	ranlib $(LZO_STAGING_DIR)/lib/liblzo2.a
	touch built-lzo
	@echo "THIRD_PARTY: Built LZO"

built-lzo-clean:
	@echo "THIRD_PARTY: Cleaning LZO..."
	rm -f -R $(LZO_BUILD_DIR)
	rm -f -R $(LZO_STAGING_DIR)
	rm -f built-lzo
	@echo "THIRD_PARTY: Cleaned LZO"

#######################################################################################
# OPENVPN
#######################################################################################

built-openvpn-prepare:
	@echo "THIRD_PARTY: Expanding and Patching OpenVPN..."
	mkdir -p $(OPENVPN_BUILD_DIR)
	cd $(TOPDIR)/$(SOURCES_NAME) ; \
	for version_name in `ls openvpn` ; do \
		echo "THIRD_PARTY: Expanding $$version_name..." ; \
		mkdir -p $(OPENVPN_BUILD_DIR)/$$version_name ; \
		tar -x -f $(OPENVPN_SOURCE_DIR)/$$version_name/$$version_name.tar.gz -C $(OPENVPN_BUILD_DIR)/$$version_name ; \
		cd $(OPENVPN_BUILD_DIR)/$$version_name ; \
		mv $$version_name   openvpn ; \
		cd  openvpn ; \
		if [ -d $(OPENVPN_SOURCE_DIR)/$$version_name/patches ]; then \
			for patch_file in `ls $(OPENVPN_SOURCE_DIR)/$$version_name/patches/*.diff`; do \
				patch_name=$$(basename "$${patch_file}") ; \
				if [  $$patch_name != 01-enable-utun.diff \
				   -o $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
					patch -p1 -N --dry-run -i $$patch_file > /dev/null; \
					if [ $$? == 0 ]; then \
						patch -p1 -N -i $$patch_file; \
						if [ $$? == 0 ]; then \
							echo "OpenVPN patch applied: $$version_name/$$patch_name" ; \
						else \
							echo "error: OpenVPN patch failed after a successful dry run: $$version_name/$$patch_name" ; \
						fi \
					else \
						echo "error: OpenVPN patch could not be applied: $$version_name/$$patch_name" ; \
					fi \
				else \
					echo "OpenVPN patch skipped because not building with Xcode 3: $$version_name/$$patch_name" ; \
				fi \
			done; \
		else \
			echo "No OpenVPN patches for $$version_name" ; \
		fi; \
	done
	touch built-openvpn-prepare
	@echo "THIRD_PARTY: Expanded and Patched OpenVPN"

built-openvpn: built-openvpn-prepare built-lzo built-pkcs11-helper built-openssl
	@echo "THIRD_PARTY: Building OpenVPN..."
	cd $(OPENVPN_BUILD_DIR) ; \
	cd ../ ; \
	for openvpn_name in `ls openvpn`; do \
		cd openvpn/$$openvpn_name/openvpn; \
		if [ -f $(OPENVPN_SOURCE_DIR)/$$openvpn_name/configure-options.txt ] ; then \
			configure_options=`cat $(OPENVPN_SOURCE_DIR)/$$openvpn_name/configure-options.txt` ; \
		else \
			configure_options=" --enable-static=yes \
						 		--enable-shared \
						 		--enable-pkcs11 \
						 		--disable-debug \
						 		--disable-plugin-auth-pam \
						 		--disable-dependency-tracking \
						 		--enable-crypto \
						 		--enable-ssl" ; \
		fi ; \
		if [ -d src ]; then \
			echo "Making $$openvpn_name from post-2.3-alpha1 build system"; \
			for a in $(TARGET_ARCHS); do \
				$(MAKE) clean; \
				CC="$(CC)" \
				CFLAGS="$(CFLAGS) \
				        -arch $$a \
				        $(OPENVPN_DEPRECATED_LLVN_OPTION) \
				        $(TB_USE_RFC_3542)" \
				LZO_CFLAGS="-I$(LZO_STAGING_DIR)/include" \
				LZO_LIBS="-L$(LZO_STAGING_DIR)/lib \
				          -llzo2" \
				OPENSSL_SSL_CFLAGS="-I$(OPENSSL_STAGING_DIR)/include/$$a" \
				OPENSSL_SSL_LIBS="$(OPENSSL_STAGING_DIR)/lib/libssl.a" \
				OPENSSL_CRYPTO_CFLAGS="-I$(OPENSSL_STAGING_DIR)/include/$$a" \
				OPENSSL_CRYPTO_LIBS="$(OPENSSL_STAGING_DIR)/lib/libcrypto.a \
				                     -lz" \
				PKCS11_HELPER_CFLAGS="-I$(PKCS11_STAGING_DIR)/include/" \
				PKCS11_HELPER_LIBS="-L$(PKCS11_STAGING_DIR)/lib \
				                    -lpkcs11-helper" \
				OS_VERSION=`uname -r` \
					autoreconf -i -v; \
				\
				CC="$(CC)" \
				CFLAGS="$(CFLAGS) \
				        -arch $$a \
				        $(OPENVPN_DEPRECATED_LLVN_OPTION) \
				        $(TB_USE_RFC_3542)" \
				LZO_CFLAGS="-I$(LZO_STAGING_DIR)/include" \
				LZO_LIBS="-L$(LZO_STAGING_DIR)/lib \
				          -llzo2" \
				OPENSSL_SSL_CFLAGS="-I$(OPENSSL_STAGING_DIR)/include/$$a" \
				OPENSSL_SSL_LIBS="$(OPENSSL_STAGING_DIR)/lib/libssl.a" \
				OPENSSL_CRYPTO_CFLAGS="-I$(OPENSSL_STAGING_DIR)/include/$$a" \
				OPENSSL_CRYPTO_LIBS="$(OPENSSL_STAGING_DIR)/lib/libcrypto.a \
				                     -lz" \
				PKCS11_HELPER_CFLAGS="-I$(PKCS11_STAGING_DIR)/include/" \
				PKCS11_HELPER_LIBS="-L$(PKCS11_STAGING_DIR)/lib \
				                    -lpkcs11-helper" \
				OS_VERSION=`uname -r` \
				./configure \
					 --build=$$a-apple-darwin \
					 $$configure_options ; \
				\
				$(MAKE) LIBS="$(OPENSSL_TARGET_FILES) \
							  -L$(PKCS11_STAGING_DIR)/lib \
							  -L$(LZO_STAGING_DIR)/lib \
							  -lpkcs11-helper \
							  -llzo2" \
							  $(OPENVPN_DEPRECATED_GCC_MAKE_OPTION) ; \
				\
				echo "Making down-root plugin" ; \
				$(MAKE) -C src/plugins/down-root clean ; \
				$(MAKE) LDFLAGS="-bundle \
				                 -Wl,-dylib_install_name,openvpn-down-root.so" \
				                 -C src/plugins/down-root ; \
	 			cp -f -p -R src/openvpn/openvpn ../openvpn_tblk_$$a; \
                cp -f -p -R src/plugins/down-root/.libs/openvpn-plugin-down-root.so ../openvpn-plugin-down-root.so_tblk_$$a; \
	 		done; \
			mkdir -p $(OPENVPN_PRODUCTS_DIR)/$$openvpn_name ; \
			lipo ../openvpn-plugin-down-root.so_tblk_* -create -output $(OPENVPN_PRODUCTS_DIR)/$$openvpn_name/openvpn-down-root.so; \
			rm ../openvpn-plugin-down-root.so_tblk_* ; \
		else \
			echo "Making $$openvpn_name from pre-2.3-alpha2 build system"; \
			for a in $(TARGET_ARCHS_2_2); do \
				$(MAKE) clean; \
				autoreconf -i -v; \
				CC=$(CC) \
				CFLAGS="$(CFLAGS) -arch $$a" \
				OS_VERSION=`uname -r` \
				./configure --build=$$a-apple-darwin \
				            --with-lzo-headers=$(LZO_STAGING_DIR)/include \
				            --with-lzo-lib=$(LZO_STAGING_DIR)/lib \
				            --with-pkcs11-helper-headers=$(PKCS11_STAGING_DIR)/include \
				            --with-pkcs11-helper-lib=$(PKCS11_STAGING_DIR)/lib \
				            --with-ssl-headers=$(OPENSSL_STAGING_DIR)/include/$$a \
				            --with-ssl-lib=$(OPENSSL_STAGING_DIR)/lib \
				            --disable-dependency-tracking; \
				$(MAKE) LIBS="$(OPENSSL_TARGET_FILES) -lpkcs11-helper -llzo2 -lz"; \
				cp -f -p -R openvpn ../openvpn_tblk_$$a; \
			done; \
			$(MAKE) CC_FLAGS="-Wall -isysroot $(SDKROOT) -Os -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET) $(DOWN_ROOT_ARCH_2_2)" -C plugin/down-root; \
			cp -f -p -R plugin/down-root/openvpn-down-root.so $(OPENVPN_PRODUCTS_DIR)/$$openvpn_name/openvpn-down-root.so; \
		fi; \
		cd ../; \
		mkdir -p $(OPENVPN_PRODUCTS_DIR)/$$openvpn_name ; \
		lipo openvpn_tblk_* -create -output $(OPENVPN_PRODUCTS_DIR)/$$openvpn_name/openvpn-executable; \
		rm openvpn_tblk_* ; \
		cd ../../; \
	done
	touch built-openvpn
	@echo "THIRD_PARTY: Built OpenVPN"

built-openvpn-clean:
	@echo "THIRD_PARTY: Cleaning OpenVPN..."
	rm -f -R $(OPENVPN_BUILD_DIR)
	rm -f built-openvpn
	@echo "THIRD_PARTY: Cleaned OpenVPN"

#######################################################################################
# TUNTAP
#######################################################################################

built-tuntap-prepare:
	@echo "THIRD_PARTY: Expanding Tun/Tap ..."
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		cd $(TUNTAP_SOURCE_DIR)/$(TUNTAP_20090913_NAME) ; \
		mkdir -p $(TUNTAP_BUILD_DIR)/$(TUNTAP_20090913_NAME) ; \
		tar -x -f $(TUNTAP_20090913_TARGZ) -C $(TUNTAP_BUILD_DIR)/$(TUNTAP_20090913_NAME) ; \
	fi ; \
	cd $(TUNTAP_SOURCE_DIR)/$(TUNTAP_20111101_NAME) ; \
    mkdir -p $(TUNTAP_BUILD_DIR)/$(TUNTAP_20111101_NAME) ; \
	tar -x -f $(TUNTAP_20111101_TARGZ) -C $(TUNTAP_BUILD_DIR)/$(TUNTAP_20111101_NAME) ; \
	cd $(TUNTAP_SOURCE_DIR)/$(TUNTAP_CURRENT_NAME) ; \
    mkdir -p $(TUNTAP_BUILD_DIR)/$(TUNTAP_CURRENT_NAME) ; \
	tar -x -f $(TUNTAP_CURRENT_TARGZ) -C $(TUNTAP_BUILD_DIR)/$(TUNTAP_CURRENT_NAME) ;
	@echo "THIRD_PARTY: Patching Tun/Tap..."
	for tuntapdir in $(TUNTAP_20090913_NAME) $(TUNTAP_20111101_NAME) $(TUNTAP_CURRENT_NAME) ; do \
		if [ -d $(TUNTAP_BUILD_DIR)/$$tuntapdir/tuntap ] ; then \
			cd $(TUNTAP_BUILD_DIR)/$$tuntapdir/tuntap ; \
			for patch_file in $(TUNTAP_SOURCE_DIR)/$$tuntapdir/patches/*.diff; do \
				patch_name=$$tuntapdir/$$(basename "$${patch_file}") ; \
				patch -p0 -N --dry-run -i $$patch_file > /dev/null; \
				if [ $$? == 0 ]; then \
					patch -p0 -N -i $$patch_file; \
					if [ $$? == 0 ]; then \
						echo "Tun/Tap patch applied: $$patch_name" ; \
					else \
						echo "error: Tun/Tap patch failed after a successful dry run: $$patch_name" ; \
					fi \
				else \
					echo "error: Tun/Tap patch could not be applied: $$patch_name" ; \
				fi \
			done ; \
		fi ; \
	done
	touch built-tuntap-prepare
	@echo "THIRD_PARTY: Patched Tun/Tap"

built-tuntap: built-tuntap-prepare
	@echo "THIRD_PARTY: Building Tun/Tap for '$(ARCHS)' with deploy-target '$(MACOSX_DEPLOYMENT_TARGET)' and SDK path '$(SDK_DIR)'" ;
	export TUNTAP_ARCHS="$(foreach f, $(TARGET_ARCHS), -arch $f)" ; \
	cd $(TUNTAP_BUILD_DIR) ; \
	mkdir -p $(TUNTAP_PRODUCTS_DIR) ; \
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		$(MAKE) -C $(TUNTAP_20090913_NAME)/tuntap/ ; \
		cp -f -p -R $(TUNTAP_20090913_NAME)/tuntap/tap.kext $(TUNTAP_PRODUCTS_DIR)/tap-20090913.kext ; \
		cp -f -p -R $(TUNTAP_20090913_NAME)/tuntap/tun.kext $(TUNTAP_PRODUCTS_DIR)/tun-20090913.kext ; \
	fi ; \
	$(MAKE) -C $(TUNTAP_20111101_NAME)/tuntap/ ; \
	cp -f -p -R $(TUNTAP_20111101_NAME)/tuntap/tap.kext $(TUNTAP_PRODUCTS_DIR)/tap-20111101.kext ; \
	cp -f -p -R $(TUNTAP_20111101_NAME)/tuntap/tun.kext $(TUNTAP_PRODUCTS_DIR)/tun-20111101.kext ; \
	$(MAKE) -C $(TUNTAP_CURRENT_NAME)/tuntap/ ; \
	cp -f -p -R $(TUNTAP_CURRENT_NAME)/tuntap/tap.kext $(TUNTAP_PRODUCTS_DIR)/tap.kext ; \
	cp -f -p -R $(TUNTAP_CURRENT_NAME)/tuntap/tun.kext $(TUNTAP_PRODUCTS_DIR)/tun.kext
	touch built-tuntap
	@echo "THIRD_PARTY: Built Tun/Tap"

built-tuntap-clean:
	@echo "THIRD_PARTY: Cleaning Tun/Tap..."
	rm -f -R $(TUNTAP_BUILD_DIR)
	rm -f -R $(TUNTAP_PRODUCTS_DIR)
	rm -f built-tuntap
	@echo "THIRD_PARTY: Cleaned Tun/Tap"

#######################################################################################
# SPARKLE
#######################################################################################

built-sparkle-prepare:
	@echo "THIRD_PARTY: Expanding Sparkle.framework..."
	mkdir -p "$(SPARKLE_BUILD_DIR)"
	cd "$(SPARKLE_BUILD_DIR)" ; \
	unzip -q "$(TOPDIR)/$(SOURCES_NAME)/$(SPARKLE_ZIP_NAME)"
	@echo "THIRD_PARTY: Patching Sparkle.framework..."
	if [ -d $(PATCHES_DIR)/sparkle ]; then \
		cd "$(SPARKLE_BUILD_DIR)"; \
		for patch_file in `ls $(PATCHES_DIR)/sparkle/*.diff`; do \
			patch_name="$$(basename "$${patch_file}")" ; \
			patch -p1 -N --dry-run -i $$patch_file > /dev/null; \
			if [ $$? == 0 ]; then \
				patch -p1 -N -i $$patch_file; \
				if [ $$? == 0 ]; then \
				    echo "Sparkle patch applied: $(SPARKLE_NAME)/$${patch_name}" ; \
				else \
					echo "error: Sparkle patch failed after a successful dry run: $(SPARKLE_NAME)/$${patch_name}" ; \
				fi \
			else \
				echo "error: Sparkle patch could not be applied: $(SPARKLE_NAME)/$${patch_name}" ; \
			fi \
		done; \
		cp -f -p -X "$(PATCHES_DIR)/sparkle/de.lproj/Sparkle.strings" "Extras/Source Code/de.lproj/Sparkle.strings" ; \
		cp -f -p -X "$(PATCHES_DIR)/sparkle/it.lproj/Sparkle.strings" "Extras/Source Code/it.lproj/Sparkle.strings" ; \
		cp -f -p -X "$(PATCHES_DIR)/sparkle/ru.lproj/Sparkle.strings" "Extras/Source Code/ru.lproj/Sparkle.strings" ; \
		cp -f -p -X "$(PATCHES_DIR)/sparkle/sv.lproj/Sparkle.strings" "Extras/Source Code/sv.lproj/Sparkle.strings" ; \
		echo "Sparkle de, it, ru, and sv UTF-16 .strings files replaced with UTF-8 .strings files." ; \
		if [ ! -d "Extras/Source Code/build/Release" ] ; then \
			mkdir -p "Extras/Source Code/build/Release" ; \
		fi ; \
	else \
		echo "No Sparkle patches" ; \
	fi
	touch built-sparkle-prepare
	@echo "THIRD_PARTY: Patched Sparkle.framework"

built-sparkle: built-sparkle-prepare
	@echo "THIRD_PARTY: Building Sparkle.framework for '$(ARCHS)' with deploy-target '$(MACOSX_DEPLOYMENT_TARGET)' and SDK path '$(SDK_DIR)'" ;
	if [ $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
		SPARKLE_FLAGS="$(TB_SPARKLE_DEPRECATED_HANDLING)" ; \
	else \
		SPARKLE_FLAGS="$(TB_SPARKLE_DEPRECATED_HANDLING) \
		               -arch $(TARGET_ARCHS) \
		               -sdk $(SDK_DIR) \
		               BUILD_NAME=build \
		               MACOSX_DEPLOYMENT_TARGET=$(MACOSX_DEPLOYMENT_TARGET)" ; \
	fi ; \
	cd "$(SPARKLE_BUILD_DIR)/Extras/Source Code";      \
	xcodebuild -project Sparkle.xcodeproj              \
			   -target Sparkle                         \
			   -configuration Release                  \
			   $$SPARKLE_FLAGS                         \
			   clean ;                                 \
	xcodebuild -project Sparkle.xcodeproj              \
			   -target Sparkle                         \
			   -configuration Release                  \
			   $$SPARKLE_FLAGS                         \
			   GCC_TREAT_WARNINGS_AS_ERRORS=NO         \
			   build ;                                 \
	cd $(TOPDIR) ;
	rm -f -r $(SPARKLE_PRODUCTS_DIR)/Sparkle.framework
	mkdir -p $(SPARKLE_PRODUCTS_DIR)/Sparkle.framework
	cp -X -f -R "$(SPARKLE_BUILD_DIR)/Extras/Source Code/build/Release/Sparkle.framework/" \
	            $(SPARKLE_PRODUCTS_DIR)/Sparkle.framework
	touch built-sparkle
	@echo "THIRD_PARTY: Built Sparkle.framework"

built-sparkle-clean:
	@echo "THIRD_PARTY: Cleaning Sparkle.framework..."
	rm -f -R "$(SPARKLE_BUILD_DIR)"
	rm -f -R "$(SPARKLE_PRODUCTS_DIR)"
	rm -f built-sparkle
	@echo "THIRD_PARTY: Cleaned Sparkle.framework"

#######################################################################################
# EASY-RSA
#######################################################################################

built-easy-rsa-tunnelblick:
	@echo "THIRD_PARTY: Building easy-rsa-tunnelblick..."
	rm -f -r "$(EASY_RSA_PRODUCTS_DIR)"
	mkdir -p "$(EASY_RSA_PRODUCTS_DIR)"
	rsync -aq --exclude=".*"    "$(EASY_RSA_SOURCE_DIR)/easy-rsa-2-tunnelblick/" "$(EASY_RSA_PRODUCTS_DIR)"
	mkdir -p                                                                     "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f -R "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/doc"                   "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f -R "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/easyrsa3"              "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f -R "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/Licensing"             "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f    "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/ChangeLog"             "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f    "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/COPYING"               "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f    "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/KNOWN_ISSUES"          "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f    "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/README"                "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	cp -X -f    "$(EASY_RSA_SOURCE_DIR)/$(EASY_RSA_3_NAME)/README.quickstart.md"  "$(EASY_RSA_PRODUCTS_DIR)/EasyRSA-3"
	@echo "$(EASY_RSA_3_NAME)"  |  sed -e 's/easy-rsa\-//'  >                     "$(EASY_RSA_PRODUCTS_DIR)/v3version.txt"
	touch built-easy-rsa-tunnelblick
	@echo "THIRD_PARTY: Built easy-rsa-tunnelblick"

built-easy-rsa-tunnelblick-clean:
	@echo "THIRD_PARTY: Cleaning easy-rsa-tunnelblick..."
	rm -f -r "$(EASY_RSA_PRODUCTS_DIR)"
	rm -f built-easy-rsa-tunnelblick
	@echo "THIRD_PARTY: Cleaned easy-rsa-tunnelblick"
