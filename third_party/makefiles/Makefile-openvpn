# Makefile to build openvpn for Tunnelblick
#
# Copyright 2004, 2005, 2006, 2007, 2008, 2009 Angelo Laub
# Contributions by Jonathan K. Bullard Copyright 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2020. All rights reserved.
#
#  This file is part of Tunnelblick.
#
#  Tunnelblick is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2
#  as published by the Free Software Foundation.
#
#  Tunnelblick is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program (see the file COPYING included with this
#  distribution); if not, write to the Free Software Foundation, Inc.,

built-openvpn-prepare:
	@echo "THIRD_PARTY: Expanding and Patching OpenVPN..."
	mkdir -p $(OPENVPN_BUILD_DIR)
	cd "$(SOURCES_DIR)" ; \
	for openvpn_folder_name in $$(ls openvpn) ; do \
        if [ "$${openvpn_folder_name:0:11}" = "openvpn-2.3" ] && [ "$(OPENVPN_OPENSSL_1_1_TARGET_ARCHS)" = "arm64" ] ; then \
            echo "THIRD_PARTY: SKIP openvpn-2.3 for arm64"; \
            continue; \
        fi ; \
		cd "$(OPENVPN_SOURCE_DIR)/$$openvpn_folder_name" ; \
		openvpn_tar_gz_name=$$(ls openvpn*.tar.?z) ; \
		cd ../../ ; \
		echo "THIRD_PARTY: Expanding $$openvpn_folder_name/$$openvpn_tar_gz_name..." ; \
		mkdir -p $(OPENVPN_BUILD_DIR)/$$openvpn_folder_name ; \
		tar -x -f $(OPENVPN_SOURCE_DIR)/$$openvpn_folder_name/$$openvpn_tar_gz_name -C $(OPENVPN_BUILD_DIR)/$$openvpn_folder_name ; \
		cd $(OPENVPN_BUILD_DIR)/$$openvpn_folder_name ; \
		openvpn_tar_name="$${openvpn_tar_gz_name%.*}" ; \
		openvpn_name="$${openvpn_tar_name%.*}" ; \
		mv $$openvpn_name   openvpn ; \
		cd  openvpn ; \
		if [ -d $(OPENVPN_SOURCE_DIR)/$$openvpn_folder_name/patches ]; then \
			for patch_file in $$(ls $(OPENVPN_SOURCE_DIR)/$$openvpn_folder_name/patches/*.diff); do \
				patch_name=$$(basename "$${patch_file}") ; \
				if [  $$patch_name != 01-enable-utun.diff \
				   -o $(XCODE_VERSION_MAJOR) = 0300 ] ; then \
					patch -p1 -N --dry-run -i $$patch_file > /dev/null; \
					if [ $$? == 0 ]; then \
						patch -p1 -N -i $$patch_file; \
						if [ $$? == 0 ]; then \
							echo "OpenVPN patch applied: $$openvpn_folder_name/$$patch_name" ; \
						else \
							echo "error: OpenVPN patch failed after a successful dry run: $$openvpn_folder_name/$$patch_name" ; \
						fi \
					else \
						echo "error: OpenVPN patch could not be applied: $$openvpn_folder_name/$$patch_name" ; \
					fi \
				else \
					echo "OpenVPN patch skipped because not building with Xcode 3: $$openvpn_folder_name/$$patch_name" ; \
				fi \
			done; \
		else \
			echo "No OpenVPN patches for $$openvpn_folder_name" ; \
		fi; \
	done
	touch built-openvpn-prepare
	@echo "THIRD_PARTY: Expanded and Patched OpenVPN"

built-openvpn: built-openvpn-prepare built-lzo built-lz4 built-pkcs11-helper built-allssl
	@echo "THIRD_PARTY: Building OpenVPN..."
	cd $(BUILD_DIR) ; \
	for openvpn_name in $$(ls openvpn); do \
        if [ -d $(BUILD_DIR)/openvpn/$$openvpn_name/openvpn ] ; then \
            cd $(BUILD_DIR)/openvpn/$$openvpn_name/openvpn ; \
            openvpn_major_minor="$${openvpn_name:8:3}" ; \
            for ssl_name in "$(LIBRESSL_NAME)" "$(OPENSSL_1_0_NAME)" "$(OPENSSL_1_1_NAME)" ; do \
                build_it=false; \
                if [   "$$openvpn_major_minor" = "2.3" ] ; then \
                    if [ $(OPENVPN_2_3_SSL_LIBRARIES_TEST) ] ; then \
                        build_it=true ; \
                    fi ; \
                elif [ "$$openvpn_major_minor" = "2.4" ] ; then \
                    if [ $(OPENVPN_2_4_SSL_LIBRARIES_TEST) ] ; then \
                        build_it=true ; \
                    fi ; \
                elif [ "$$openvpn_major_minor" = "2.5"  ] ; then \
                    if [ $(OPENVPN_2_5_SSL_LIBRARIES_TEST) ] ; then \
                        build_it=true ; \
                    fi ; \
                else \
                    echo "warning: Will try to build unknown $$openvpn_major_minor version of OpenVPN with $$ssl_name" ; \
                    build_it=true ; \
                fi ; \
                if [ "$$ssl_name" = "$(OPENSSL_1_0_NAME)" ] ; then \
                    ssl_staging_dir="$(OPENSSL_1_0_STAGING_DIR)" ; \
                    ssl_target_files="$(OPENSSL_1_0_TARGET_FILES)" ; \
		    target_archs="$(OPENVPN_OPENSSL_1_0_TARGET_ARCHS)" ; \
                    pkcs11_enable="" ; \
                elif [ "$$ssl_name" = "$(OPENSSL_1_1_NAME)" ] ; then \
                    ssl_staging_dir="$(OPENSSL_1_1_STAGING_DIR)" ; \
                    ssl_target_files="$(OPENSSL_1_1_TARGET_FILES)" ; \
		    target_archs="$(OPENVPN_OPENSSL_1_1_TARGET_ARCHS)" ; \
                    pkcs11_enable="--enable-pkcs11" ; \
                elif [ "$$ssl_name" = "$(LIBRESSL_NAME)"    ] ; then \
                    ssl_staging_dir="$(LIBRESSL_STAGING_DIR)" ; \
                    ssl_target_files="$(OPENSSL_1_0_TARGET_FILES)" ; \
		    target_archs="$(OPENVPN_LIBRESSL_TARGET_ARCHS)" ; \
                    pkcs11_enable="" ; \
                else \
                    echo "error: do not know how to build OpenVPN $$openvpn_major_minor with '$$ssl_name'" ; \
                    exit 255 ; \
                fi ; \
                if [ "$$build_it" = true ] \
                && [ -e "$$ssl_staging_dir" ] ; then \
                    for a in $$target_archs ; do \
                        echo "Making $$openvpn_name with $$ssl_name for $$a" ; \
                        mwd="$$(pwd)" ; \
                        $(MAKE) clean; \
                        \
                        if [ -f "$(OPENVPN_SOURCE_DIR)/$$openvpn_name/configure-options.txt" ] ; then \
                            configure_options="$$(cat $(OPENVPN_SOURCE_DIR)/$$openvpn_name/configure-options.txt)" ; \
                        else \
                            echo "error: configure-options.txt missing in $(OPENVPN_SOURCE_DIR)/$$openvpn_name" ; \
                            exit 255 ; \
                        fi ; \
                        \
                        mwd="$$(pwd)" ; \
                        CC="$(CC)" \
                            CFLAGS="$(CFLAGS) \
                                    -arch $$a \
                                    $(OPENVPN_DEPRECATED_LLVN_OPTION) \
                                    -D __APPLE_USE_RFC_3542" \
                            LZO_CFLAGS="-I$(LZO_STAGING_DIR)/include" \
                            LZO_LIBS="-L$(LZO_STAGING_DIR)/lib \
                                      -llzo2" \
                            LZ4_CFLAGS="-I$(LZ4_STAGING_DIR)/include" \
                            LZ4_LIBS="-L$(LZ4_STAGING_DIR)/lib \
                                      -llz4" \
                            OPENSSL_CFLAGS="-I$${ssl_staging_dir}/$$a/include" \
                            OPENSSL_SSL_CFLAGS="-I$${ssl_staging_dir}/$$a/include" \
                            OPENSSL_CRYPTO_CFLAGS="-I$${ssl_staging_dir}/$$a/include" \
                            OPENSSL_LIBS="$${ssl_staging_dir}/lib/libssl.a -lz $${ssl_staging_dir}/lib/libcrypto.a -lz" \
                            OPENSSL_SSL_LIBS="$${ssl_staging_dir}/lib/libssl.a" \
                            OPENSSL_CRYPTO_LIBS="$${ssl_staging_dir}/lib/libcrypto.a -lz" \
                            PKCS11_HELPER_CFLAGS="-I$(PKCS11_STAGING_DIR)/include/" \
                            PKCS11_HELPER_LIBS="-L$(PKCS11_STAGING_DIR)/lib \
                                                -lpkcs11-helper" \
                            OS_VERSION=$$(uname -r) \
                            autoreconf -i -v; \
                        \
                        mwd="$$(pwd)" ; \
                        case "$$a" in \
                         arm64) BUILD_STR="arm-apple-darwin" ;; \
                             *) BUILD_STR="$$a-apple-darwin" ;; \
                        esac ; \
                        CC="$(CC)" \
                            CFLAGS="$(CFLAGS) \
                                    -arch $$a \
                                    $(OPENVPN_DEPRECATED_LLVN_OPTION) \
                                    -D __APPLE_USE_RFC_3542" \
                            LZO_CFLAGS="-I$(LZO_STAGING_DIR)/include" \
                            LZO_LIBS="-L$(LZO_STAGING_DIR)/lib \
                                      -llzo2" \
                            LZ4_CFLAGS="-I$(LZ4_STAGING_DIR)/include" \
                            LZ4_LIBS="-L$(LZ4_STAGING_DIR)/lib \
                                      -llz4" \
                            OPENSSL_CFLAGS="-I$${ssl_staging_dir}/$$a/include" \
                            OPENSSL_SSL_CFLAGS="-I$${ssl_staging_dir}/$$a/include" \
                            OPENSSL_CRYPTO_CFLAGS="-I$${ssl_staging_dir}/$$a/include" \
                            OPENSSL_LIBS="$${ssl_staging_dir}/lib/libssl.a -lz $${ssl_staging_dir}/lib/libcrypto.a -lz" \
                            OPENSSL_SSL_LIBS="$${ssl_staging_dir}/lib/libssl.a" \
                            OPENSSL_CRYPTO_LIBS="$${ssl_staging_dir}/lib/libcrypto.a -lz" \
                            PKCS11_HELPER_CFLAGS="-I$(PKCS11_STAGING_DIR)/include/" \
                            PKCS11_HELPER_LIBS="-L$(PKCS11_STAGING_DIR)/lib \
                                                -lpkcs11-helper" \
                            OS_VERSION=$$(uname -r) \
                            ./configure \
                                --build=$$BUILD_STR \
                                $$pkcs11_enable \
                                $$configure_options ; \
                        \
                        $(MAKE) LIBS="$$ssl_target_files \
                                      -L$(PKCS11_STAGING_DIR)/lib \
                                      -L$(LZO_STAGING_DIR)/lib \
                                      -L$(LZ4_STAGING_DIR)/lib \
                                      -lpkcs11-helper \
                                      -llzo2 \
                                      -llz4" \
                                      $(OPENVPN_DEPRECATED_GCC_MAKE_OPTION) ; \
                        \
                        echo "Making down-root plugin for $$a" ; \
                        $(MAKE) -C src/plugins/down-root clean ; \
                        $(MAKE) LDFLAGS="-bundle \
                                         -Wl,-dylib_install_name,openvpn-down-root.so" \
                                         -C src/plugins/down-root ; \
                        if [ -e src/openvpn/openvpn ] ; then \
                            cp -f -p -R src/openvpn/openvpn ../openvpn_tblk_$$a; \
                        else \
                            echo "warning: No file at $$mwd/src/openvpn/openvpn" ; \
                        fi ; \
                        if [ -e src/plugins/down-root/.libs/openvpn-plugin-down-root.so ] ; then \
                            cp -f -p -R src/plugins/down-root/.libs/openvpn-plugin-down-root.so ../openvpn-plugin-down-root.so_tblk_$$a; \
                        else \
                            echo "warning: No file at $$mwd/src/plugins/down-root/.libs/openvpn-plugin-down-root.so" ; \
                        fi ; \
                        echo "Finished making down-root plugin for $$a" ; \
                    done; \
                    mkdir -p "$(OPENVPN_PRODUCTS_DIR)/$$openvpn_name-$$ssl_name" ; \
                    lipo ../openvpn-plugin-down-root.so_tblk_* -create -output "$(OPENVPN_PRODUCTS_DIR)/$$openvpn_name-$$ssl_name/openvpn-down-root.so"; \
                    cd ../; \
                    lipo openvpn_tblk_* -create -output "$(OPENVPN_PRODUCTS_DIR)/$$openvpn_name-$$ssl_name/openvpn-executable"; \
                    if [   ! -e "$(OPENVPN_PRODUCTS_DIR)/$$openvpn_name-$$ssl_name/openvpn-executable" \
                        -o ! -e "$(OPENVPN_PRODUCTS_DIR)/$$openvpn_name-$$ssl_name/openvpn-down-root.so" ] ; then \
                        cd openvpn ; \
                        rm -f -R "$(OPENVPN_PRODUCTS_DIR)/$$openvpn_name-$$ssl_name" ; \
                        echo "error: removed $$openvpn_name-$$ssl_name folder because it did not contain both openvpn-executable and openvpn-down-root.so" ; \
                        exit 255; \
                    fi ; \
                    cd openvpn ; \
                else \
                    if [ "$$build_it" != true ] ; then \
                        echo "Not making $$openvpn_name with $$ssl_name because they are not compatible"; \
                    fi ; \
                    if [ ! -e "$$ssl_staging_dir" ] ; then \
                        echo "Not making $$openvpn_name with $$ssl_name because $$ssl_name is not available"; \
                    fi ; \
                fi ; \
            done; \
        fi ; \
	done
	touch "$(TOPDIR)/built-openvpn"
	@echo "THIRD_PARTY: Built OpenVPN"

built-openvpn-clean:
	@echo "THIRD_PARTY: Cleaning OpenVPN..."
	rm -f -R "$(OPENVPN_BUILD_DIR)"
	rm -f built-openvpn
	@echo "THIRD_PARTY: Cleaned OpenVPN"
